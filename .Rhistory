)
)
server = function(input, output) {
map = leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 17)
output$mymap = renderLeaflet(map)
}
shinyApp(ui = ui, server = server)
# shiny script
library(leaflet)
library(shiny)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("mymap", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
#sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
#            value = range(quakes$mag), step = 0.1))
titlePanel("safsafs"))
# absolutePanel(
#   titlePanel("SADSADSA"),
#   id = "controls", class = "panel panel-default", fixed = TRUE,
#   draggable = TRUE, top = 60, left = "auto", right = 20, bottom = "auto",
#   width = 330, height = "auto",
#   h2("Imóveis para alugar no Rio de Janeiro")
)
)
server = function(input, output) {
map = leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 17)
output$mymap = renderLeaflet(map)
}
shinyApp(ui = ui, server = server)
# shiny script
library(leaflet)
library(shiny)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("mymap", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
#sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
#            value = range(quakes$mag), step = 0.1))
textOutput("safsafs"))
# absolutePanel(
#   titlePanel("SADSADSA"),
#   id = "controls", class = "panel panel-default", fixed = TRUE,
#   draggable = TRUE, top = 60, left = "auto", right = 20, bottom = "auto",
#   width = 330, height = "auto",
#   h2("Imóveis para alugar no Rio de Janeiro")
)
)
server = function(input, output) {
map = leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 17)
output$mymap = renderLeaflet(map)
}
shinyApp(ui = ui, server = server)
# shiny script
library(leaflet)
library(shiny)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("mymap", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
#sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
#            value = range(quakes$mag), step = 0.1))
sidebarPanel(helpText("safsafs")))
# absolutePanel(
#   titlePanel("SADSADSA"),
#   id = "controls", class = "panel panel-default", fixed = TRUE,
#   draggable = TRUE, top = 60, left = "auto", right = 20, bottom = "auto",
#   width = 330, height = "auto",
#   h2("Imóveis para alugar no Rio de Janeiro")
)
)
server = function(input, output) {
map = leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 17)
output$mymap = renderLeaflet(map)
}
shinyApp(ui = ui, server = server)
# shiny script
library(leaflet)
library(shiny)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("mymap", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
#sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
#            value = range(quakes$mag), step = 0.1))
(helpText("safsafs")))
# absolutePanel(
#   titlePanel("SADSADSA"),
#   id = "controls", class = "panel panel-default", fixed = TRUE,
#   draggable = TRUE, top = 60, left = "auto", right = 20, bottom = "auto",
#   width = 330, height = "auto",
#   h2("Imóveis para alugar no Rio de Janeiro")
)
)
server = function(input, output) {
map = leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 17)
output$mymap = renderLeaflet(map)
}
shinyApp(ui = ui, server = server)
# shiny script
library(leaflet)
library(shiny)
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("mymap", width = "100%", height = "100%")
# absolutePanel(
#   titlePanel("SADSADSA"),
#   id = "controls", class = "panel panel-default", fixed = TRUE,
#   draggable = TRUE, top = 60, left = "auto", right = 20, bottom = "auto",
#   width = 330, height = "auto",
#   h2("Imóveis para alugar no Rio de Janeiro")
)
server = function(input, output) {
map = leaflet() %>% addTiles() %>% setView(-93.65, 42.0285, zoom = 17)
output$mymap = renderLeaflet(map)
}
shinyApp(ui = ui, server = server)
rm(list = ls())
library(leaflet)
library(shiny)
library(RColorBrewer)
load("/home/sillas/R/Projetos/olx/data/post4-df.apt-tratado.rdata")
load("/home/sillas/R/Projetos/olx/data/post4-df.quartos-tratado.rdata")
/home/sillas/R/Projetos/olx/data/post4-df.apt-tratado.rdata
load("/home/sillas/R/Projetos/olx/data/post4-df.apt-tratado.rdata")
ls()
x <- 1
ls()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(magrittr)
library(dplyr)
library(leaflet)
library(stringr)
library(RColorBrewer)
# carregar arquivo com apartamentos
load("/home/sillas/R/Projetos/olx/data/df_apt.rdata")
df.apt <- df; rm(df)
head(df)
# carregar arquivos com coordenadas
df.coord <- read.csv2("/home/sillas/R/Projetos/olx/data/post4-coordenadas.csv", stringsAsFactors = FALSE)
head(df.coord)
# Juntar arquivos em um só
df.apt$cep %<>% as.character()
df.apt %<>% left_join(df.coord, by = "cep")
rm(df.coord)
df.quartos <- read.csv2("/home/sillas/R/Projetos/olx/data/post4-quartos.csv", stringsAsFactors = FALSE)
head(df.quartos)
sum(is.na(df.apt$lat)); 100*sum(is.na(df.apt$lat))/nrow(df.apt)
df.apt %>%
filter(is.na(lat)) %>%
group_by(bairro) %>%
summarise(qtd = n(), aluguel_mediano = median(preco, na.rm = TRUE)) %>%
arrange(desc(qtd)) %>%
top_n(15, qtd)
# Remover os apartamentos sem coordenadas
df.apt %<>% filter(!is.na(lat))
df.quartos %<>% filter(!is.na(lat))
# Para distinguir os apartamentos no mapa pelo preço, usamos a função colorBin para criar intervalos de cores
# Qual seria um bom intervalo?
aluguel <- c(df.apt$preco, df.quartos$preco)
aluguel %<>% na.omit()
quantile(aluguel, seq(0, 1,  0.05))
# 90% dos preços estão abaixo de R$3200
intervalo <- seq(0, 3200, 400)
# criar palette para colorir os pontos no mapa: verde significa aluguel baixo, vermelho aluguel caro
palette_rev <- rev(brewer.pal(length(intervalo), "RdYlGn"))
# O vetor de cores é criado com a função colorBin
vetorCoresApt <- colorBin(palette_rev, domain = df.apt$preco, bins = intervalo, na.color = "black")
vetorCoresQuarto <- colorBin(palette_rev, domain = df.quartos$preco, bins = intervalo, na.color = "black")
# Criar função para exibir texto ao clicar em um imóvel
html_link <- function(link) paste0('<a href="', link, '">Link</a>')
textoPopup <- function(data, tipo) {
# tipo = quarto ou Apartamento
if (!tipo %in% c("apartamento", "quarto")) stop("Input errado.")
x = paste0(
"Tipo do imóvel: ", tipo, "<br>",
"Url: ", html_link(data$link), "<br>",
"Título: ", data$titulo, "<br>",
"Preço: R$", data$preco, "<br>"
)
if (tipo == "apartamento") {
x = paste0(
x,
"Condomínio: R$", data$taxa_condominio, "<br>",
"Quartos: ", data$qtd_quarto, "<br>",
"Área (m²): ", data$area_condominio, "<br>",
"Garagem: ", data$garagem, "<br>"
)
}
return(x)
}
# adicionar ruído aleatório para fazer com que pontos em uma mesma rua se dispersem
set.seed(123)
jit <- 40
df.apt$lat <- jitter(df.apt$lat, jit)
df.apt$lon <- jitter(df.apt$lon, jit)
df.quartos$lat %<>% jitter(jit)
df.quartos$lon %<>% jitter(jit)
df.apt %>% write.csv2("/home/sillas/R/Projetos/olx/data/post4-df.apt-tratado.csv", row.names = FALSE)
df.quartos %>% write.csv2("/home/sillas/R/Projetos/olx/data/post4-df.quartos-tratado.csv", row.names = FALSE)
rm(list = ls())
load("/home/sillas/R/Projetos/olx/data/post4-df.apt-tratado.rdata")
df.apt <- read.csv2("/home/sillas/R/Projetos/olx/data/post4-df.apt-tratado.csv", stringsAsFactors = FALSE)
df.quartos <- read.csv2("/home/sillas/R/Projetos/olx/data/post4-df.quartos-tratado.csv", stringsAsFactors  = FALSE)
library(RColorBrewer)
palette_rev <- rev(brewer.pal(length(intervalo), "RdYlGn"))
intervalo <- seq(0, 3200, 400)
palette_rev <- rev(brewer.pal(length(intervalo), "RdYlGn"))
vetorCoresApt <- colorBin(palette_rev, domain = df.apt$preco, bins = intervalo, na.color = "black")
vetorCoresQuarto <- colorBin(palette_rev, domain = df.quartos$preco, bins = intervalo, na.color = "black")
html_link <- function(link) paste0('<a href="', link, '">Link</a>')
textoPopup <- function(data, tipo) {
# tipo = quarto ou Apartamento
if (!tipo %in% c("apartamento", "quarto")) stop("Input errado.")
x = paste0(
"Tipo do imóvel: ", tipo, "<br>",
"Url: ", html_link(data$link), "<br>",
"Título: ", data$titulo, "<br>",
"Preço: R$", data$preco, "<br>"
)
if (tipo == "apartamento") {
x = paste0(
x,
"Condomínio: R$", data$taxa_condominio, "<br>",
"Quartos: ", data$qtd_quarto, "<br>",
"Área (m²): ", data$area_condominio, "<br>",
"Garagem: ", data$garagem, "<br>"
)
}
return(x)
}
source("/home/sillas/R/Projetos/olx/post4-prepararshiny.R")
rm(list = ls())
source("/home/sillas/R/Projetos/olx/post4-prepararshiny.R")
library(leaflet)
library(shiny)
source("/home/sillas/R/Projetos/olx/post4-prepararshiny.R")
# shiny script
library(leaflet)
library(shiny)
source("/home/sillas/R/Projetos/olx/post4-prepararshiny.R")
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("mymap", width = "100%", height = "100%")
)
server = function(input, output) {
output$mymap = renderLeaflet(map)
}
shinyApp(ui = ui, server = server)
?addMarkers
# iniciar objeto leaflet
map <- leaflet() %>%
addTiles() %>%
addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
# coordenadas de um ponto em específico
addMarkers(lat = -22.911872, lng = -43.230184, popup = "Esse é o estádio do Maracanã!")
#addMarkers(lng = -43.183447, lat = -22.913912) %>%  # -22.911872, -43.230184
# plotar apartamentos
addCircleMarkers(data = df.apt,
lng = ~lon, lat = ~lat,
color = ~vetorCoresApt(preco),
opacity = 1.5,
popup = textoPopup(df.apt, "apartamento"),
# Definir nome do grupo para ser usado na camada
group = "Apartamentos") %>%
# plotar quartos
addCircleMarkers(data = df.quartos,
lng = ~lon, lat = ~lat,
color = ~vetorCoresQuarto(preco),
opacity = 1.5,
popup = textoPopup(df.quartos, "quarto"),
group = "Quartos") %>%
addLayersControl(
overlayGroups = c("Apartamentos", "Quartos"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend(pal = vetorCoresApt, values = df.apt$preco)
# iniciar objeto leaflet
map <- leaflet() %>%
addTiles() %>%
addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
# coordenadas de um ponto em específico
addMarkers(lat = -22.911872, lng = -43.230184, popup = "Esse é o estádio do Maracanã!") %>%
#addMarkers(lng = -43.183447, lat = -22.913912) %>%  # -22.911872, -43.230184
# plotar apartamentos
addCircleMarkers(data = df.apt,
lng = ~lon, lat = ~lat,
color = ~vetorCoresApt(preco),
opacity = 1.5,
popup = textoPopup(df.apt, "apartamento"),
# Definir nome do grupo para ser usado na camada
group = "Apartamentos") %>%
# plotar quartos
addCircleMarkers(data = df.quartos,
lng = ~lon, lat = ~lat,
color = ~vetorCoresQuarto(preco),
opacity = 1.5,
popup = textoPopup(df.quartos, "quarto"),
group = "Quartos") %>%
addLayersControl(
overlayGroups = c("Apartamentos", "Quartos"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend(pal = vetorCoresApt, values = df.apt$preco)
map
# iniciar objeto leaflet
map <- leaflet() %>%
addTiles() %>%
addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
# coordenadas de um ponto em específico
addMarkers(lat = -22.911872, lng = -43.230184,
popup = "Estádio do Maracanã! <br> Apenas um exemplo!") %>%
#addMarkers(lng = -43.183447, lat = -22.913912) %>%  # -22.911872, -43.230184
# plotar apartamentos
addCircleMarkers(data = df.apt,
lng = ~lon, lat = ~lat,
color = ~vetorCoresApt(preco),
opacity = 1.5,
popup = textoPopup(df.apt, "apartamento"),
# Definir nome do grupo para ser usado na camada
group = "Apartamentos") %>%
# plotar quartos
addCircleMarkers(data = df.quartos,
lng = ~lon, lat = ~lat,
color = ~vetorCoresQuarto(preco),
opacity = 1.5,
popup = textoPopup(df.quartos, "quarto"),
group = "Quartos") %>%
addLayersControl(
overlayGroups = c("Apartamentos", "Quartos"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend(pal = vetorCoresApt, values = df.apt$preco)
map
# shiny script
library(leaflet)
library(shiny)
source("/home/sillas/R/Projetos/olx/post4-prepararshiny.R")
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("mymap", width = "100%", height = "100%")
)
server = function(input, output) {
output$mymap = renderLeaflet(map)
}
shinyApp(ui = ui, server = server)
runApp('post4-shiny.R')
library(leaflet)
library(shiny)
source("/home/sillas/R/Projetos/olx/post4-prepararshiny.R")
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("mymap", width = "100%", height = "100%")
)
server = function(input, output) {
output$mymap = renderLeaflet(map)
}
shinyApp(ui = ui, server = server)
setwd("/home/sillas/R/Projetos/olx/shiny")
source('post4-shiny.R')
setwd("/home/sillas/R/Projetos/olx/shiny")
library(leaflet)
library(shiny)
source("/home/sillas/R/Projetos/olx/post4-prepararshiny.R")
ui = bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("mymap", width = "100%", height = "100%")
)
server = function(input, output) {
output$mymap = renderLeaflet(map)
}
shinyApp(ui = ui, server = server)
source('post4-shiny.R')
source('post4-shiny.R')
runApp()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(magrittr)
library(dplyr)
library(leaflet)
library(stringr)
library(RColorBrewer)
# carregar arquivo com apartamentos
load("/home/sillas/R/Projetos/olx/data/df_apt.rdata")
df.apt <- df; rm(df)
head(df)
# carregar arquivos com coordenadas
df.coord <- read.csv2("/home/sillas/R/Projetos/olx/data/post4-coordenadas.csv", stringsAsFactors = FALSE)
head(df.coord)
# Juntar arquivos em um só
df.apt$cep %<>% as.character()
df.apt %<>% left_join(df.coord, by = "cep")
rm(df.coord)
df.quartos <- read.csv2("/home/sillas/R/Projetos/olx/data/post4-quartos.csv", stringsAsFactors = FALSE)
head(df.quartos)
sum(is.na(df.apt$lat)); 100*sum(is.na(df.apt$lat))/nrow(df.apt)
df.apt %>%
filter(is.na(lat)) %>%
group_by(bairro) %>%
summarise(qtd = n(), aluguel_mediano = median(preco, na.rm = TRUE)) %>%
arrange(desc(qtd)) %>%
top_n(15, qtd)
# Remover os apartamentos sem coordenadas
df.apt %<>% filter(!is.na(lat))
df.quartos %<>% filter(!is.na(lat))
# Para distinguir os apartamentos no mapa pelo preço, usamos a função colorBin para criar intervalos de cores
# Qual seria um bom intervalo?
aluguel <- c(df.apt$preco, df.quartos$preco)
aluguel %<>% na.omit()
quantile(aluguel, seq(0, 1,  0.05))
# 90% dos preços estão abaixo de R$3200
intervalo <- seq(0, 3200, 400)
# criar palette para colorir os pontos no mapa: verde significa aluguel baixo, vermelho aluguel caro
palette_rev <- rev(brewer.pal(length(intervalo), "RdYlGn"))
# O vetor de cores é criado com a função colorBin
vetorCoresApt <- colorBin(palette_rev, domain = df.apt$preco, bins = intervalo, na.color = "black")
vetorCoresQuarto <- colorBin(palette_rev, domain = df.quartos$preco, bins = intervalo, na.color = "black")
# Criar função para exibir texto ao clicar em um imóvel
html_link <- function(link) paste0('<a href="', link, '">Link</a>')
textoPopup <- function(data, tipo) {
# tipo = quarto ou Apartamento
if (!tipo %in% c("apartamento", "quarto")) stop("Input errado.")
x = paste0(
"Tipo do imóvel: ", tipo, "<br>",
"Url: ", html_link(data$link), "<br>",
"Título: ", data$titulo, "<br>",
"Preço: R$", data$preco, "<br>"
)
if (tipo == "apartamento") {
x = paste0(
x,
"Condomínio: R$", data$taxa_condominio, "<br>",
"Quartos: ", data$qtd_quarto, "<br>",
"Área (m²): ", data$area_condominio, "<br>",
"Garagem: ", data$garagem, "<br>"
)
}
return(x)
}
# adicionar ruído aleatório para fazer com que pontos em uma mesma rua se dispersem
set.seed(123)
jit <- 40
df.apt$lat <- jitter(df.apt$lat, jit)
df.apt$lon <- jitter(df.apt$lon, jit)
df.quartos$lat %<>% jitter(jit)
df.quartos$lon %<>% jitter(jit)
# iniciar objeto leaflet
map <- leaflet() %>%
addTiles() %>%
addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
# coordenadas de um ponto em específico
#addMarkers(lat = -22.911872, lng = -43.230184,
#           popup = "Estádio do Maracanã! <br> Apenas um exemplo!") %>%
addMarkers(lng = -43.183447, lat = -22.913912) %>%  # -22.911872, -43.230184
# plotar apartamentos
addCircleMarkers(data = df.apt,
lng = ~lon, lat = ~lat,
color = ~vetorCoresApt(preco),
opacity = 1.5,
popup = textoPopup(df.apt, "apartamento"),
# Definir nome do grupo para ser usado na camada
group = "Apartamentos") %>%
# plotar quartos
addCircleMarkers(data = df.quartos,
lng = ~lon, lat = ~lat,
color = ~vetorCoresQuarto(preco),
opacity = 1.5,
popup = textoPopup(df.quartos, "quarto"),
group = "Quartos") %>%
addLayersControl(
overlayGroups = c("Apartamentos", "Quartos"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend(pal = vetorCoresApt, values = df.apt$preco)
map
map
df.apt2 <- df.apt %>% filter(bairro == "Centro")
df.quartos2 <- df.quartos  %>% filter(bairro == "Centro")
df.apt$bairro %<>% str_trim(); df.quartos$bairro %<>% str_trim()
df.apt2 <- df.apt %>% filter(bairro == "Centro")
df.quartos2 <- df.quartos  %>% filter(bairro == "Centro")
df.apt$bairro %<>% str_trim(); df.quartos$bairro %<>% str_trim()
df.apt2 <- df.apt %>% filter(bairro == "Centro")
df.quartos2 <- df.quartos  %>% filter(bairro == "Centro")
map <- leaflet() %>%
addTiles() %>%
addProviderTiles("OpenStreetMap.BlackAndWhite") %>%
# coordenadas de um ponto em específico
#addMarkers(lat = -22.911872, lng = -43.230184,
#           popup = "Estádio do Maracanã! <br> Apenas um exemplo!") %>%
addMarkers(lng = -43.183447, lat = -22.913912) %>%  # -22.911872, -43.230184
# plotar apartamentos
addCircleMarkers(data = df.apt2,
lng = ~lon, lat = ~lat,
color = ~vetorCoresApt(preco),
opacity = 1.5,
popup = textoPopup(df.apt2, "apartamento"),
# Definir nome do grupo para ser usado na camada
group = "Apartamentos") %>%
# plotar quartos
addCircleMarkers(data = df.quartos2,
lng = ~lon, lat = ~lat,
color = ~vetorCoresQuarto(preco),
opacity = 1.5,
popup = textoPopup(df.quartos2, "quarto"),
group = "Quartos") %>%
addLayersControl(
overlayGroups = c("Apartamentos", "Quartos"),
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend(pal = vetorCoresApt, values = df.apt2$preco)
map
map
